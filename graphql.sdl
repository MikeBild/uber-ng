interface Node {
  id: ID!
}

scalar SuperDuperUniqueKey

enum STATUS {
  # Fahrt angefragt
  angefragt
  # Auftrag wartet auf Bestaetigung
  warteAufBestaetigung
  # Fahrt angenommen
  angenommen
}

type Fahrgast implements Node {
  id: ID!
  name: String!
}

input AnfrageInput {
  fahrgastId: ID! @deprecated(reason: "Do not use!")
  von: String!
  nach: String!
}

# Fahrtangebote
type Angebot implements Node {
  id: ID!
  fahrgast: Fahrgast
  von: String!
  nach: String!
  fahrer: Fahrer
  wartezeit: String
  status: STATUS
}

input AngebotAnnehmenInput {
  angebotId: ID!
}

input AngebotAblehnenInput {
  angebotId: ID!
  grund: String!
}

type Fahrer {
  id: ID!
}

type Viewer {
  benutzername: String
  angebot(id: ID!): Angebot
  angebote(status: STATUS): [Angebot]
}

type  Query {
  angebote(take: Int, skip: Int): [Angebot]
  viewer(id: ID): Viewer
  entities: [Node]
}

type Mutation {
  # Fahrt wird angefragt
  fahrtAnfragen(input: AnfrageInput!): Angebot
  angebotAnnehmen(input: AngebotAnnehmenInput!): Angebot
  angebotAblehnen(input: AngebotAblehnenInput!): Angebot
}

type Subscription {
  onAngebotChanged: Angebot
}